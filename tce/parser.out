Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Unused terminals:

    EXCEPTION
    NUMBER
    COMMENTLINE

Grammar

Rule 0     S' -> start
Rule 1     start -> definations
Rule 2     definations -> defination
Rule 3     definations -> defination definations
Rule 4     defination -> struct_def ;
Rule 5     defination -> interface_def ;
Rule 6     defination -> sequence_def ;
Rule 7     defination -> dictionary_def ;
Rule 8     defination -> <empty>
Rule 9     sequence_def -> SEQUENCE < type > IDENTIFIER
Rule 10    dictionary_def -> DICTIONARY < type , type > IDENTIFIER
Rule 11    interface_def -> INTERFACE IDENTIFIER { operatemembers }
Rule 12    operatemembers -> operatemember
Rule 13    operatemembers -> operatemember operatemembers
Rule 14    operatemember -> callreturn IDENTIFIER ( operateparams ) ;
Rule 15    operateparams -> type_id
Rule 16    operateparams -> <empty>
Rule 17    operateparams -> type_id , operateparams
Rule 18    callreturn -> type
Rule 19    struct_def -> STRUCT IDENTIFIER { datamembers }
Rule 20    datamembers -> datamember
Rule 21    datamembers -> datamember datamembers
Rule 22    datamember -> type_id ;
Rule 23    type_id -> type IDENTIFIER
Rule 24    type -> IDENTIFIER

Terminals, with rules where they appear

(                    : 14
)                    : 14
,                    : 10 17
;                    : 4 5 6 7 14 22
<                    : 9 10
>                    : 9 10
COMMENTLINE          : 
DICTIONARY           : 10
EXCEPTION            : 
IDENTIFIER           : 9 10 11 14 19 23 24
INTERFACE            : 11
NUMBER               : 
SEQUENCE             : 9
STRUCT               : 19
error                : 
{                    : 11 19
}                    : 11 19

Nonterminals, with rules where they appear

callreturn           : 14
datamember           : 20 21
datamembers          : 19 21
defination           : 2 3
definations          : 1 3
dictionary_def       : 7
interface_def        : 5
operatemember        : 12 13
operatemembers       : 11 13
operateparams        : 14 17
sequence_def         : 6
start                : 0
struct_def           : 4
type                 : 9 10 10 18 23
type_id              : 15 17 22

Parsing method: SLR

state 0

    (0) S' -> . start
    (1) start -> . definations
    (2) definations -> . defination
    (3) definations -> . defination definations
    (4) defination -> . struct_def ;
    (5) defination -> . interface_def ;
    (6) defination -> . sequence_def ;
    (7) defination -> . dictionary_def ;
    (8) defination -> .
    (19) struct_def -> . STRUCT IDENTIFIER { datamembers }
    (11) interface_def -> . INTERFACE IDENTIFIER { operatemembers }
    (9) sequence_def -> . SEQUENCE < type > IDENTIFIER
    (10) dictionary_def -> . DICTIONARY < type , type > IDENTIFIER

  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for SEQUENCE resolved as shift
  ! shift/reduce conflict for DICTIONARY resolved as shift
    $end            reduce using rule 8 (defination -> .)
    STRUCT          shift and go to state 2
    INTERFACE       shift and go to state 10
    SEQUENCE        shift and go to state 11
    DICTIONARY      shift and go to state 6

  ! INTERFACE       [ reduce using rule 8 (defination -> .) ]
  ! DICTIONARY      [ reduce using rule 8 (defination -> .) ]
  ! STRUCT          [ reduce using rule 8 (defination -> .) ]
  ! SEQUENCE        [ reduce using rule 8 (defination -> .) ]

    interface_def                  shift and go to state 1
    dictionary_def                 shift and go to state 3
    definations                    shift and go to state 4
    defination                     shift and go to state 5
    start                          shift and go to state 7
    sequence_def                   shift and go to state 8
    struct_def                     shift and go to state 9

state 1

    (5) defination -> interface_def . ;

    ;               shift and go to state 12


state 2

    (19) struct_def -> STRUCT . IDENTIFIER { datamembers }

    IDENTIFIER      shift and go to state 13


state 3

    (7) defination -> dictionary_def . ;

    ;               shift and go to state 14


state 4

    (1) start -> definations .

    $end            reduce using rule 1 (start -> definations .)


state 5

    (2) definations -> defination .
    (3) definations -> defination . definations
    (2) definations -> . defination
    (3) definations -> . defination definations
    (4) defination -> . struct_def ;
    (5) defination -> . interface_def ;
    (6) defination -> . sequence_def ;
    (7) defination -> . dictionary_def ;
    (8) defination -> .
    (19) struct_def -> . STRUCT IDENTIFIER { datamembers }
    (11) interface_def -> . INTERFACE IDENTIFIER { operatemembers }
    (9) sequence_def -> . SEQUENCE < type > IDENTIFIER
    (10) dictionary_def -> . DICTIONARY < type , type > IDENTIFIER

  ! reduce/reduce conflict for $end resolved using rule 2 (definations -> defination .)
  ! shift/reduce conflict for STRUCT resolved as shift
  ! shift/reduce conflict for INTERFACE resolved as shift
  ! shift/reduce conflict for SEQUENCE resolved as shift
  ! shift/reduce conflict for DICTIONARY resolved as shift
    $end            reduce using rule 2 (definations -> defination .)
    STRUCT          shift and go to state 2
    INTERFACE       shift and go to state 10
    SEQUENCE        shift and go to state 11
    DICTIONARY      shift and go to state 6

  ! $end            [ reduce using rule 8 (defination -> .) ]
  ! INTERFACE       [ reduce using rule 8 (defination -> .) ]
  ! DICTIONARY      [ reduce using rule 8 (defination -> .) ]
  ! STRUCT          [ reduce using rule 8 (defination -> .) ]
  ! SEQUENCE        [ reduce using rule 8 (defination -> .) ]

    interface_def                  shift and go to state 1
    dictionary_def                 shift and go to state 3
    defination                     shift and go to state 5
    definations                    shift and go to state 15
    sequence_def                   shift and go to state 8
    struct_def                     shift and go to state 9

state 6

    (10) dictionary_def -> DICTIONARY . < type , type > IDENTIFIER

    <               shift and go to state 16


state 7

    (0) S' -> start .



state 8

    (6) defination -> sequence_def . ;

    ;               shift and go to state 17


state 9

    (4) defination -> struct_def . ;

    ;               shift and go to state 18


state 10

    (11) interface_def -> INTERFACE . IDENTIFIER { operatemembers }

    IDENTIFIER      shift and go to state 19


state 11

    (9) sequence_def -> SEQUENCE . < type > IDENTIFIER

    <               shift and go to state 20


state 12

    (5) defination -> interface_def ; .

    $end            reduce using rule 5 (defination -> interface_def ; .)
    INTERFACE       reduce using rule 5 (defination -> interface_def ; .)
    DICTIONARY      reduce using rule 5 (defination -> interface_def ; .)
    STRUCT          reduce using rule 5 (defination -> interface_def ; .)
    SEQUENCE        reduce using rule 5 (defination -> interface_def ; .)


state 13

    (19) struct_def -> STRUCT IDENTIFIER . { datamembers }

    {               shift and go to state 21


state 14

    (7) defination -> dictionary_def ; .

    $end            reduce using rule 7 (defination -> dictionary_def ; .)
    INTERFACE       reduce using rule 7 (defination -> dictionary_def ; .)
    DICTIONARY      reduce using rule 7 (defination -> dictionary_def ; .)
    STRUCT          reduce using rule 7 (defination -> dictionary_def ; .)
    SEQUENCE        reduce using rule 7 (defination -> dictionary_def ; .)


state 15

    (3) definations -> defination definations .

    $end            reduce using rule 3 (definations -> defination definations .)


state 16

    (10) dictionary_def -> DICTIONARY < . type , type > IDENTIFIER
    (24) type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 22

    type                           shift and go to state 23

state 17

    (6) defination -> sequence_def ; .

    $end            reduce using rule 6 (defination -> sequence_def ; .)
    INTERFACE       reduce using rule 6 (defination -> sequence_def ; .)
    DICTIONARY      reduce using rule 6 (defination -> sequence_def ; .)
    STRUCT          reduce using rule 6 (defination -> sequence_def ; .)
    SEQUENCE        reduce using rule 6 (defination -> sequence_def ; .)


state 18

    (4) defination -> struct_def ; .

    $end            reduce using rule 4 (defination -> struct_def ; .)
    INTERFACE       reduce using rule 4 (defination -> struct_def ; .)
    DICTIONARY      reduce using rule 4 (defination -> struct_def ; .)
    STRUCT          reduce using rule 4 (defination -> struct_def ; .)
    SEQUENCE        reduce using rule 4 (defination -> struct_def ; .)


state 19

    (11) interface_def -> INTERFACE IDENTIFIER . { operatemembers }

    {               shift and go to state 24


state 20

    (9) sequence_def -> SEQUENCE < . type > IDENTIFIER
    (24) type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 22

    type                           shift and go to state 25

state 21

    (19) struct_def -> STRUCT IDENTIFIER { . datamembers }
    (20) datamembers -> . datamember
    (21) datamembers -> . datamember datamembers
    (22) datamember -> . type_id ;
    (23) type_id -> . type IDENTIFIER
    (24) type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 22

    type                           shift and go to state 28
    datamembers                    shift and go to state 29
    datamember                     shift and go to state 26
    type_id                        shift and go to state 27

state 22

    (24) type -> IDENTIFIER .

    >               reduce using rule 24 (type -> IDENTIFIER .)
    ,               reduce using rule 24 (type -> IDENTIFIER .)
    IDENTIFIER      reduce using rule 24 (type -> IDENTIFIER .)


state 23

    (10) dictionary_def -> DICTIONARY < type . , type > IDENTIFIER

    ,               shift and go to state 30


state 24

    (11) interface_def -> INTERFACE IDENTIFIER { . operatemembers }
    (12) operatemembers -> . operatemember
    (13) operatemembers -> . operatemember operatemembers
    (14) operatemember -> . callreturn IDENTIFIER ( operateparams ) ;
    (18) callreturn -> . type
    (24) type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 22

    callreturn                     shift and go to state 32
    type                           shift and go to state 33
    operatemembers                 shift and go to state 31
    operatemember                  shift and go to state 34

state 25

    (9) sequence_def -> SEQUENCE < type . > IDENTIFIER

    >               shift and go to state 35


state 26

    (20) datamembers -> datamember .
    (21) datamembers -> datamember . datamembers
    (20) datamembers -> . datamember
    (21) datamembers -> . datamember datamembers
    (22) datamember -> . type_id ;
    (23) type_id -> . type IDENTIFIER
    (24) type -> . IDENTIFIER

    }               reduce using rule 20 (datamembers -> datamember .)
    IDENTIFIER      shift and go to state 22

    type                           shift and go to state 28
    datamembers                    shift and go to state 36
    datamember                     shift and go to state 26
    type_id                        shift and go to state 27

state 27

    (22) datamember -> type_id . ;

    ;               shift and go to state 37


state 28

    (23) type_id -> type . IDENTIFIER

    IDENTIFIER      shift and go to state 38


state 29

    (19) struct_def -> STRUCT IDENTIFIER { datamembers . }

    }               shift and go to state 39


state 30

    (10) dictionary_def -> DICTIONARY < type , . type > IDENTIFIER
    (24) type -> . IDENTIFIER

    IDENTIFIER      shift and go to state 22

    type                           shift and go to state 40

state 31

    (11) interface_def -> INTERFACE IDENTIFIER { operatemembers . }

    }               shift and go to state 41


state 32

    (14) operatemember -> callreturn . IDENTIFIER ( operateparams ) ;

    IDENTIFIER      shift and go to state 42


state 33

    (18) callreturn -> type .

    IDENTIFIER      reduce using rule 18 (callreturn -> type .)


state 34

    (12) operatemembers -> operatemember .
    (13) operatemembers -> operatemember . operatemembers
    (12) operatemembers -> . operatemember
    (13) operatemembers -> . operatemember operatemembers
    (14) operatemember -> . callreturn IDENTIFIER ( operateparams ) ;
    (18) callreturn -> . type
    (24) type -> . IDENTIFIER

    }               reduce using rule 12 (operatemembers -> operatemember .)
    IDENTIFIER      shift and go to state 22

    callreturn                     shift and go to state 32
    type                           shift and go to state 33
    operatemembers                 shift and go to state 43
    operatemember                  shift and go to state 34

state 35

    (9) sequence_def -> SEQUENCE < type > . IDENTIFIER

    IDENTIFIER      shift and go to state 44


state 36

    (21) datamembers -> datamember datamembers .

    }               reduce using rule 21 (datamembers -> datamember datamembers .)


state 37

    (22) datamember -> type_id ; .

    }               reduce using rule 22 (datamember -> type_id ; .)
    IDENTIFIER      reduce using rule 22 (datamember -> type_id ; .)


state 38

    (23) type_id -> type IDENTIFIER .

    )               reduce using rule 23 (type_id -> type IDENTIFIER .)
    ,               reduce using rule 23 (type_id -> type IDENTIFIER .)
    ;               reduce using rule 23 (type_id -> type IDENTIFIER .)


state 39

    (19) struct_def -> STRUCT IDENTIFIER { datamembers } .

    ;               reduce using rule 19 (struct_def -> STRUCT IDENTIFIER { datamembers } .)


state 40

    (10) dictionary_def -> DICTIONARY < type , type . > IDENTIFIER

    >               shift and go to state 45


state 41

    (11) interface_def -> INTERFACE IDENTIFIER { operatemembers } .

    ;               reduce using rule 11 (interface_def -> INTERFACE IDENTIFIER { operatemembers } .)


state 42

    (14) operatemember -> callreturn IDENTIFIER . ( operateparams ) ;

    (               shift and go to state 46


state 43

    (13) operatemembers -> operatemember operatemembers .

    }               reduce using rule 13 (operatemembers -> operatemember operatemembers .)


state 44

    (9) sequence_def -> SEQUENCE < type > IDENTIFIER .

    ;               reduce using rule 9 (sequence_def -> SEQUENCE < type > IDENTIFIER .)


state 45

    (10) dictionary_def -> DICTIONARY < type , type > . IDENTIFIER

    IDENTIFIER      shift and go to state 47


state 46

    (14) operatemember -> callreturn IDENTIFIER ( . operateparams ) ;
    (15) operateparams -> . type_id
    (16) operateparams -> .
    (17) operateparams -> . type_id , operateparams
    (23) type_id -> . type IDENTIFIER
    (24) type -> . IDENTIFIER

    )               reduce using rule 16 (operateparams -> .)
    IDENTIFIER      shift and go to state 22

    operateparams                  shift and go to state 48
    type                           shift and go to state 28
    type_id                        shift and go to state 49

state 47

    (10) dictionary_def -> DICTIONARY < type , type > IDENTIFIER .

    ;               reduce using rule 10 (dictionary_def -> DICTIONARY < type , type > IDENTIFIER .)


state 48

    (14) operatemember -> callreturn IDENTIFIER ( operateparams . ) ;

    )               shift and go to state 50


state 49

    (15) operateparams -> type_id .
    (17) operateparams -> type_id . , operateparams

    )               reduce using rule 15 (operateparams -> type_id .)
    ,               shift and go to state 51


state 50

    (14) operatemember -> callreturn IDENTIFIER ( operateparams ) . ;

    ;               shift and go to state 52


state 51

    (17) operateparams -> type_id , . operateparams
    (15) operateparams -> . type_id
    (16) operateparams -> .
    (17) operateparams -> . type_id , operateparams
    (23) type_id -> . type IDENTIFIER
    (24) type -> . IDENTIFIER

    )               reduce using rule 16 (operateparams -> .)
    IDENTIFIER      shift and go to state 22

    operateparams                  shift and go to state 53
    type                           shift and go to state 28
    type_id                        shift and go to state 49

state 52

    (14) operatemember -> callreturn IDENTIFIER ( operateparams ) ; .

    }               reduce using rule 14 (operatemember -> callreturn IDENTIFIER ( operateparams ) ; .)
    IDENTIFIER      reduce using rule 14 (operatemember -> callreturn IDENTIFIER ( operateparams ) ; .)


state 53

    (17) operateparams -> type_id , operateparams .

    )               reduce using rule 17 (operateparams -> type_id , operateparams .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for STRUCT in state 0 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 0 resolved as shift
WARNING: shift/reduce conflict for SEQUENCE in state 0 resolved as shift
WARNING: shift/reduce conflict for DICTIONARY in state 0 resolved as shift
WARNING: shift/reduce conflict for STRUCT in state 5 resolved as shift
WARNING: shift/reduce conflict for INTERFACE in state 5 resolved as shift
WARNING: shift/reduce conflict for SEQUENCE in state 5 resolved as shift
WARNING: shift/reduce conflict for DICTIONARY in state 5 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (definations -> defination)
WARNING: rejected rule (defination -> <empty>) in state 5
